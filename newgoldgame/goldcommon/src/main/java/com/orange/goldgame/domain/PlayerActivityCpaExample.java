package com.orange.goldgame.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayerActivityCpaExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public PlayerActivityCpaExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	protected PlayerActivityCpaExample(PlayerActivityCpaExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table player_activity_cpa
	 * @abatorgenerated  Thu Apr 10 14:16:42 CST 2014
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andPlayerIdIsNull() {
			addCriterion("player_id is null");
			return this;
		}

		public Criteria andPlayerIdIsNotNull() {
			addCriterion("player_id is not null");
			return this;
		}

		public Criteria andPlayerIdEqualTo(Integer value) {
			addCriterion("player_id =", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotEqualTo(Integer value) {
			addCriterion("player_id <>", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdGreaterThan(Integer value) {
			addCriterion("player_id >", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("player_id >=", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdLessThan(Integer value) {
			addCriterion("player_id <", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdLessThanOrEqualTo(Integer value) {
			addCriterion("player_id <=", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdIn(List<Integer> values) {
			addCriterion("player_id in", values, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotIn(List<Integer> values) {
			addCriterion("player_id not in", values, "playerId");
			return this;
		}

		public Criteria andPlayerIdBetween(Integer value1, Integer value2) {
			addCriterion("player_id between", value1, value2, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotBetween(Integer value1, Integer value2) {
			addCriterion("player_id not between", value1, value2, "playerId");
			return this;
		}

		public Criteria andCreateTimeIsNull() {
			addCriterion("create_time is null");
			return this;
		}

		public Criteria andCreateTimeIsNotNull() {
			addCriterion("create_time is not null");
			return this;
		}

		public Criteria andCreateTimeEqualTo(Date value) {
			addCriterion("create_time =", value, "createTime");
			return this;
		}

		public Criteria andCreateTimeNotEqualTo(Date value) {
			addCriterion("create_time <>", value, "createTime");
			return this;
		}

		public Criteria andCreateTimeGreaterThan(Date value) {
			addCriterion("create_time >", value, "createTime");
			return this;
		}

		public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
			addCriterion("create_time >=", value, "createTime");
			return this;
		}

		public Criteria andCreateTimeLessThan(Date value) {
			addCriterion("create_time <", value, "createTime");
			return this;
		}

		public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
			addCriterion("create_time <=", value, "createTime");
			return this;
		}

		public Criteria andCreateTimeIn(List<Date> values) {
			addCriterion("create_time in", values, "createTime");
			return this;
		}

		public Criteria andCreateTimeNotIn(List<Date> values) {
			addCriterion("create_time not in", values, "createTime");
			return this;
		}

		public Criteria andCreateTimeBetween(Date value1, Date value2) {
			addCriterion("create_time between", value1, value2, "createTime");
			return this;
		}

		public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
			addCriterion("create_time not between", value1, value2,
					"createTime");
			return this;
		}

		public Criteria andReceiveTimeIsNull() {
			addCriterion("receive_time is null");
			return this;
		}

		public Criteria andReceiveTimeIsNotNull() {
			addCriterion("receive_time is not null");
			return this;
		}

		public Criteria andReceiveTimeEqualTo(Date value) {
			addCriterion("receive_time =", value, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeNotEqualTo(Date value) {
			addCriterion("receive_time <>", value, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeGreaterThan(Date value) {
			addCriterion("receive_time >", value, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeGreaterThanOrEqualTo(Date value) {
			addCriterion("receive_time >=", value, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeLessThan(Date value) {
			addCriterion("receive_time <", value, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeLessThanOrEqualTo(Date value) {
			addCriterion("receive_time <=", value, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeIn(List<Date> values) {
			addCriterion("receive_time in", values, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeNotIn(List<Date> values) {
			addCriterion("receive_time not in", values, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeBetween(Date value1, Date value2) {
			addCriterion("receive_time between", value1, value2, "receiveTime");
			return this;
		}

		public Criteria andReceiveTimeNotBetween(Date value1, Date value2) {
			addCriterion("receive_time not between", value1, value2,
					"receiveTime");
			return this;
		}

		public Criteria andReceivesIsNull() {
			addCriterion("receives is null");
			return this;
		}

		public Criteria andReceivesIsNotNull() {
			addCriterion("receives is not null");
			return this;
		}

		public Criteria andReceivesEqualTo(Integer value) {
			addCriterion("receives =", value, "receives");
			return this;
		}

		public Criteria andReceivesNotEqualTo(Integer value) {
			addCriterion("receives <>", value, "receives");
			return this;
		}

		public Criteria andReceivesGreaterThan(Integer value) {
			addCriterion("receives >", value, "receives");
			return this;
		}

		public Criteria andReceivesGreaterThanOrEqualTo(Integer value) {
			addCriterion("receives >=", value, "receives");
			return this;
		}

		public Criteria andReceivesLessThan(Integer value) {
			addCriterion("receives <", value, "receives");
			return this;
		}

		public Criteria andReceivesLessThanOrEqualTo(Integer value) {
			addCriterion("receives <=", value, "receives");
			return this;
		}

		public Criteria andReceivesIn(List<Integer> values) {
			addCriterion("receives in", values, "receives");
			return this;
		}

		public Criteria andReceivesNotIn(List<Integer> values) {
			addCriterion("receives not in", values, "receives");
			return this;
		}

		public Criteria andReceivesBetween(Integer value1, Integer value2) {
			addCriterion("receives between", value1, value2, "receives");
			return this;
		}

		public Criteria andReceivesNotBetween(Integer value1, Integer value2) {
			addCriterion("receives not between", value1, value2, "receives");
			return this;
		}

		public Criteria andActivityTypeIsNull() {
			addCriterion("activity_type is null");
			return this;
		}

		public Criteria andActivityTypeIsNotNull() {
			addCriterion("activity_type is not null");
			return this;
		}

		public Criteria andActivityTypeEqualTo(Integer value) {
			addCriterion("activity_type =", value, "activityType");
			return this;
		}

		public Criteria andActivityTypeNotEqualTo(Integer value) {
			addCriterion("activity_type <>", value, "activityType");
			return this;
		}

		public Criteria andActivityTypeGreaterThan(Integer value) {
			addCriterion("activity_type >", value, "activityType");
			return this;
		}

		public Criteria andActivityTypeGreaterThanOrEqualTo(Integer value) {
			addCriterion("activity_type >=", value, "activityType");
			return this;
		}

		public Criteria andActivityTypeLessThan(Integer value) {
			addCriterion("activity_type <", value, "activityType");
			return this;
		}

		public Criteria andActivityTypeLessThanOrEqualTo(Integer value) {
			addCriterion("activity_type <=", value, "activityType");
			return this;
		}

		public Criteria andActivityTypeIn(List<Integer> values) {
			addCriterion("activity_type in", values, "activityType");
			return this;
		}

		public Criteria andActivityTypeNotIn(List<Integer> values) {
			addCriterion("activity_type not in", values, "activityType");
			return this;
		}

		public Criteria andActivityTypeBetween(Integer value1, Integer value2) {
			addCriterion("activity_type between", value1, value2,
					"activityType");
			return this;
		}

		public Criteria andActivityTypeNotBetween(Integer value1, Integer value2) {
			addCriterion("activity_type not between", value1, value2,
					"activityType");
			return this;
		}

		public Criteria andPayMoneyIsNull() {
			addCriterion("pay_money is null");
			return this;
		}

		public Criteria andPayMoneyIsNotNull() {
			addCriterion("pay_money is not null");
			return this;
		}

		public Criteria andPayMoneyEqualTo(Integer value) {
			addCriterion("pay_money =", value, "payMoney");
			return this;
		}

		public Criteria andPayMoneyNotEqualTo(Integer value) {
			addCriterion("pay_money <>", value, "payMoney");
			return this;
		}

		public Criteria andPayMoneyGreaterThan(Integer value) {
			addCriterion("pay_money >", value, "payMoney");
			return this;
		}

		public Criteria andPayMoneyGreaterThanOrEqualTo(Integer value) {
			addCriterion("pay_money >=", value, "payMoney");
			return this;
		}

		public Criteria andPayMoneyLessThan(Integer value) {
			addCriterion("pay_money <", value, "payMoney");
			return this;
		}

		public Criteria andPayMoneyLessThanOrEqualTo(Integer value) {
			addCriterion("pay_money <=", value, "payMoney");
			return this;
		}

		public Criteria andPayMoneyIn(List<Integer> values) {
			addCriterion("pay_money in", values, "payMoney");
			return this;
		}

		public Criteria andPayMoneyNotIn(List<Integer> values) {
			addCriterion("pay_money not in", values, "payMoney");
			return this;
		}

		public Criteria andPayMoneyBetween(Integer value1, Integer value2) {
			addCriterion("pay_money between", value1, value2, "payMoney");
			return this;
		}

		public Criteria andPayMoneyNotBetween(Integer value1, Integer value2) {
			addCriterion("pay_money not between", value1, value2, "payMoney");
			return this;
		}
	}
}