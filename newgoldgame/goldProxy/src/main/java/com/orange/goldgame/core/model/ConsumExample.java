package com.orange.goldgame.core.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ConsumExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public ConsumExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    protected ConsumExample(ConsumExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table consum
     *
     * @abatorgenerated Tue Apr 15 17:30:03 CST 2014
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andConsumTimeIsNull() {
            addCriterion("consum_time is null");
            return this;
        }

        public Criteria andConsumTimeIsNotNull() {
            addCriterion("consum_time is not null");
            return this;
        }

        public Criteria andConsumTimeEqualTo(Date value) {
            addCriterionForJDBCDate("consum_time =", value, "consumTime");
            return this;
        }

        public Criteria andConsumTimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("consum_time <>", value, "consumTime");
            return this;
        }

        public Criteria andConsumTimeGreaterThan(Date value) {
            addCriterionForJDBCDate("consum_time >", value, "consumTime");
            return this;
        }

        public Criteria andConsumTimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("consum_time >=", value, "consumTime");
            return this;
        }

        public Criteria andConsumTimeLessThan(Date value) {
            addCriterionForJDBCDate("consum_time <", value, "consumTime");
            return this;
        }

        public Criteria andConsumTimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("consum_time <=", value, "consumTime");
            return this;
        }

        public Criteria andConsumTimeIn(List<Date> values) {
            addCriterionForJDBCDate("consum_time in", values, "consumTime");
            return this;
        }

        public Criteria andConsumTimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("consum_time not in", values, "consumTime");
            return this;
        }

        public Criteria andConsumTimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("consum_time between", value1, value2, "consumTime");
            return this;
        }

        public Criteria andConsumTimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("consum_time not between", value1, value2, "consumTime");
            return this;
        }

        public Criteria andNameIsNull() {
            addCriterion("name is null");
            return this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("name is not null");
            return this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("name =", value, "name");
            return this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("name <>", value, "name");
            return this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("name >", value, "name");
            return this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("name >=", value, "name");
            return this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("name <", value, "name");
            return this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("name <=", value, "name");
            return this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("name like", value, "name");
            return this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("name not like", value, "name");
            return this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("name in", values, "name");
            return this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("name not in", values, "name");
            return this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("name between", value1, value2, "name");
            return this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("name not between", value1, value2, "name");
            return this;
        }

        public Criteria andConsumIsNull() {
            addCriterion("consum is null");
            return this;
        }

        public Criteria andConsumIsNotNull() {
            addCriterion("consum is not null");
            return this;
        }

        public Criteria andConsumEqualTo(Integer value) {
            addCriterion("consum =", value, "consum");
            return this;
        }

        public Criteria andConsumNotEqualTo(Integer value) {
            addCriterion("consum <>", value, "consum");
            return this;
        }

        public Criteria andConsumGreaterThan(Integer value) {
            addCriterion("consum >", value, "consum");
            return this;
        }

        public Criteria andConsumGreaterThanOrEqualTo(Integer value) {
            addCriterion("consum >=", value, "consum");
            return this;
        }

        public Criteria andConsumLessThan(Integer value) {
            addCriterion("consum <", value, "consum");
            return this;
        }

        public Criteria andConsumLessThanOrEqualTo(Integer value) {
            addCriterion("consum <=", value, "consum");
            return this;
        }

        public Criteria andConsumIn(List<Integer> values) {
            addCriterion("consum in", values, "consum");
            return this;
        }

        public Criteria andConsumNotIn(List<Integer> values) {
            addCriterion("consum not in", values, "consum");
            return this;
        }

        public Criteria andConsumBetween(Integer value1, Integer value2) {
            addCriterion("consum between", value1, value2, "consum");
            return this;
        }

        public Criteria andConsumNotBetween(Integer value1, Integer value2) {
            addCriterion("consum not between", value1, value2, "consum");
            return this;
        }
    }
}