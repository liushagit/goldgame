package com.orange.goldgame.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class BuyPropRecordExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public BuyPropRecordExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    protected BuyPropRecordExample(BuyPropRecordExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table buy_prop_record
     *
     * @ibatorgenerated Tue Jul 09 16:45:52 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List dateList = new ArrayList();
            Iterator iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(((Date)iter.next()).getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andPropidIsNull() {
            addCriterion("propId is null");
            return this;
        }

        public Criteria andPropidIsNotNull() {
            addCriterion("propId is not null");
            return this;
        }

        public Criteria andPropidEqualTo(Integer value) {
            addCriterion("propId =", value, "propid");
            return this;
        }

        public Criteria andPropidNotEqualTo(Integer value) {
            addCriterion("propId <>", value, "propid");
            return this;
        }

        public Criteria andPropidGreaterThan(Integer value) {
            addCriterion("propId >", value, "propid");
            return this;
        }

        public Criteria andPropidGreaterThanOrEqualTo(Integer value) {
            addCriterion("propId >=", value, "propid");
            return this;
        }

        public Criteria andPropidLessThan(Integer value) {
            addCriterion("propId <", value, "propid");
            return this;
        }

        public Criteria andPropidLessThanOrEqualTo(Integer value) {
            addCriterion("propId <=", value, "propid");
            return this;
        }

        public Criteria andPropidIn(List values) {
            addCriterion("propId in", values, "propid");
            return this;
        }

        public Criteria andPropidNotIn(List values) {
            addCriterion("propId not in", values, "propid");
            return this;
        }

        public Criteria andPropidBetween(Integer value1, Integer value2) {
            addCriterion("propId between", value1, value2, "propid");
            return this;
        }

        public Criteria andPropidNotBetween(Integer value1, Integer value2) {
            addCriterion("propId not between", value1, value2, "propid");
            return this;
        }

        public Criteria andPlayeridIsNull() {
            addCriterion("playerId is null");
            return this;
        }

        public Criteria andPlayeridIsNotNull() {
            addCriterion("playerId is not null");
            return this;
        }

        public Criteria andPlayeridEqualTo(Integer value) {
            addCriterion("playerId =", value, "playerid");
            return this;
        }

        public Criteria andPlayeridNotEqualTo(Integer value) {
            addCriterion("playerId <>", value, "playerid");
            return this;
        }

        public Criteria andPlayeridGreaterThan(Integer value) {
            addCriterion("playerId >", value, "playerid");
            return this;
        }

        public Criteria andPlayeridGreaterThanOrEqualTo(Integer value) {
            addCriterion("playerId >=", value, "playerid");
            return this;
        }

        public Criteria andPlayeridLessThan(Integer value) {
            addCriterion("playerId <", value, "playerid");
            return this;
        }

        public Criteria andPlayeridLessThanOrEqualTo(Integer value) {
            addCriterion("playerId <=", value, "playerid");
            return this;
        }

        public Criteria andPlayeridIn(List values) {
            addCriterion("playerId in", values, "playerid");
            return this;
        }

        public Criteria andPlayeridNotIn(List values) {
            addCriterion("playerId not in", values, "playerid");
            return this;
        }

        public Criteria andPlayeridBetween(Integer value1, Integer value2) {
            addCriterion("playerId between", value1, value2, "playerid");
            return this;
        }

        public Criteria andPlayeridNotBetween(Integer value1, Integer value2) {
            addCriterion("playerId not between", value1, value2, "playerid");
            return this;
        }

        public Criteria andConsumeIsNull() {
            addCriterion("consume is null");
            return this;
        }

        public Criteria andConsumeIsNotNull() {
            addCriterion("consume is not null");
            return this;
        }

        public Criteria andConsumeEqualTo(Integer value) {
            addCriterion("consume =", value, "consume");
            return this;
        }

        public Criteria andConsumeNotEqualTo(Integer value) {
            addCriterion("consume <>", value, "consume");
            return this;
        }

        public Criteria andConsumeGreaterThan(Integer value) {
            addCriterion("consume >", value, "consume");
            return this;
        }

        public Criteria andConsumeGreaterThanOrEqualTo(Integer value) {
            addCriterion("consume >=", value, "consume");
            return this;
        }

        public Criteria andConsumeLessThan(Integer value) {
            addCriterion("consume <", value, "consume");
            return this;
        }

        public Criteria andConsumeLessThanOrEqualTo(Integer value) {
            addCriterion("consume <=", value, "consume");
            return this;
        }

        public Criteria andConsumeIn(List values) {
            addCriterion("consume in", values, "consume");
            return this;
        }

        public Criteria andConsumeNotIn(List values) {
            addCriterion("consume not in", values, "consume");
            return this;
        }

        public Criteria andConsumeBetween(Integer value1, Integer value2) {
            addCriterion("consume between", value1, value2, "consume");
            return this;
        }

        public Criteria andConsumeNotBetween(Integer value1, Integer value2) {
            addCriterion("consume not between", value1, value2, "consume");
            return this;
        }

        public Criteria andDateIsNull() {
            addCriterion("date is null");
            return this;
        }

        public Criteria andDateIsNotNull() {
            addCriterion("date is not null");
            return this;
        }

        public Criteria andDateEqualTo(Date value) {
            addCriterionForJDBCDate("date =", value, "date");
            return this;
        }

        public Criteria andDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("date <>", value, "date");
            return this;
        }

        public Criteria andDateGreaterThan(Date value) {
            addCriterionForJDBCDate("date >", value, "date");
            return this;
        }

        public Criteria andDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date >=", value, "date");
            return this;
        }

        public Criteria andDateLessThan(Date value) {
            addCriterionForJDBCDate("date <", value, "date");
            return this;
        }

        public Criteria andDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date <=", value, "date");
            return this;
        }

        public Criteria andDateIn(List values) {
            addCriterionForJDBCDate("date in", values, "date");
            return this;
        }

        public Criteria andDateNotIn(List values) {
            addCriterionForJDBCDate("date not in", values, "date");
            return this;
        }

        public Criteria andDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date between", value1, value2, "date");
            return this;
        }

        public Criteria andDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date not between", value1, value2, "date");
            return this;
        }
    }
}