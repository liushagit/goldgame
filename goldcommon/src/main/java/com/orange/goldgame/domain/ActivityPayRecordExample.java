package com.orange.goldgame.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivityPayRecordExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public ActivityPayRecordExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	protected ActivityPayRecordExample(ActivityPayRecordExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table activity_pay_record
	 * @ibatorgenerated  Fri Nov 22 09:22:25 CST 2013
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andPlayerIdIsNull() {
			addCriterion("player_id is null");
			return this;
		}

		public Criteria andPlayerIdIsNotNull() {
			addCriterion("player_id is not null");
			return this;
		}

		public Criteria andPlayerIdEqualTo(Integer value) {
			addCriterion("player_id =", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotEqualTo(Integer value) {
			addCriterion("player_id <>", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdGreaterThan(Integer value) {
			addCriterion("player_id >", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("player_id >=", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdLessThan(Integer value) {
			addCriterion("player_id <", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdLessThanOrEqualTo(Integer value) {
			addCriterion("player_id <=", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdIn(List values) {
			addCriterion("player_id in", values, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotIn(List values) {
			addCriterion("player_id not in", values, "playerId");
			return this;
		}

		public Criteria andPlayerIdBetween(Integer value1, Integer value2) {
			addCriterion("player_id between", value1, value2, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotBetween(Integer value1, Integer value2) {
			addCriterion("player_id not between", value1, value2, "playerId");
			return this;
		}

		public Criteria andPayMoneySumIsNull() {
			addCriterion("pay_money_sum is null");
			return this;
		}

		public Criteria andPayMoneySumIsNotNull() {
			addCriterion("pay_money_sum is not null");
			return this;
		}

		public Criteria andPayMoneySumEqualTo(Integer value) {
			addCriterion("pay_money_sum =", value, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumNotEqualTo(Integer value) {
			addCriterion("pay_money_sum <>", value, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumGreaterThan(Integer value) {
			addCriterion("pay_money_sum >", value, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumGreaterThanOrEqualTo(Integer value) {
			addCriterion("pay_money_sum >=", value, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumLessThan(Integer value) {
			addCriterion("pay_money_sum <", value, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumLessThanOrEqualTo(Integer value) {
			addCriterion("pay_money_sum <=", value, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumIn(List values) {
			addCriterion("pay_money_sum in", values, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumNotIn(List values) {
			addCriterion("pay_money_sum not in", values, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumBetween(Integer value1, Integer value2) {
			addCriterion("pay_money_sum between", value1, value2, "payMoneySum");
			return this;
		}

		public Criteria andPayMoneySumNotBetween(Integer value1, Integer value2) {
			addCriterion("pay_money_sum not between", value1, value2,
					"payMoneySum");
			return this;
		}

		public Criteria andAwardNumIsNull() {
			addCriterion("award_num is null");
			return this;
		}

		public Criteria andAwardNumIsNotNull() {
			addCriterion("award_num is not null");
			return this;
		}

		public Criteria andAwardNumEqualTo(Integer value) {
			addCriterion("award_num =", value, "awardNum");
			return this;
		}

		public Criteria andAwardNumNotEqualTo(Integer value) {
			addCriterion("award_num <>", value, "awardNum");
			return this;
		}

		public Criteria andAwardNumGreaterThan(Integer value) {
			addCriterion("award_num >", value, "awardNum");
			return this;
		}

		public Criteria andAwardNumGreaterThanOrEqualTo(Integer value) {
			addCriterion("award_num >=", value, "awardNum");
			return this;
		}

		public Criteria andAwardNumLessThan(Integer value) {
			addCriterion("award_num <", value, "awardNum");
			return this;
		}

		public Criteria andAwardNumLessThanOrEqualTo(Integer value) {
			addCriterion("award_num <=", value, "awardNum");
			return this;
		}

		public Criteria andAwardNumIn(List values) {
			addCriterion("award_num in", values, "awardNum");
			return this;
		}

		public Criteria andAwardNumNotIn(List values) {
			addCriterion("award_num not in", values, "awardNum");
			return this;
		}

		public Criteria andAwardNumBetween(Integer value1, Integer value2) {
			addCriterion("award_num between", value1, value2, "awardNum");
			return this;
		}

		public Criteria andAwardNumNotBetween(Integer value1, Integer value2) {
			addCriterion("award_num not between", value1, value2, "awardNum");
			return this;
		}

		public Criteria andPaySignIsNull() {
			addCriterion("pay_sign is null");
			return this;
		}

		public Criteria andPaySignIsNotNull() {
			addCriterion("pay_sign is not null");
			return this;
		}

		public Criteria andPaySignEqualTo(String value) {
			addCriterion("pay_sign =", value, "paySign");
			return this;
		}

		public Criteria andPaySignNotEqualTo(String value) {
			addCriterion("pay_sign <>", value, "paySign");
			return this;
		}

		public Criteria andPaySignGreaterThan(String value) {
			addCriterion("pay_sign >", value, "paySign");
			return this;
		}

		public Criteria andPaySignGreaterThanOrEqualTo(String value) {
			addCriterion("pay_sign >=", value, "paySign");
			return this;
		}

		public Criteria andPaySignLessThan(String value) {
			addCriterion("pay_sign <", value, "paySign");
			return this;
		}

		public Criteria andPaySignLessThanOrEqualTo(String value) {
			addCriterion("pay_sign <=", value, "paySign");
			return this;
		}

		public Criteria andPaySignLike(String value) {
			addCriterion("pay_sign like", value, "paySign");
			return this;
		}

		public Criteria andPaySignNotLike(String value) {
			addCriterion("pay_sign not like", value, "paySign");
			return this;
		}

		public Criteria andPaySignIn(List values) {
			addCriterion("pay_sign in", values, "paySign");
			return this;
		}

		public Criteria andPaySignNotIn(List values) {
			addCriterion("pay_sign not in", values, "paySign");
			return this;
		}

		public Criteria andPaySignBetween(String value1, String value2) {
			addCriterion("pay_sign between", value1, value2, "paySign");
			return this;
		}

		public Criteria andPaySignNotBetween(String value1, String value2) {
			addCriterion("pay_sign not between", value1, value2, "paySign");
			return this;
		}

		public Criteria andStateIsNull() {
			addCriterion("state is null");
			return this;
		}

		public Criteria andStateIsNotNull() {
			addCriterion("state is not null");
			return this;
		}

		public Criteria andStateEqualTo(Byte value) {
			addCriterion("state =", value, "state");
			return this;
		}

		public Criteria andStateNotEqualTo(Byte value) {
			addCriterion("state <>", value, "state");
			return this;
		}

		public Criteria andStateGreaterThan(Byte value) {
			addCriterion("state >", value, "state");
			return this;
		}

		public Criteria andStateGreaterThanOrEqualTo(Byte value) {
			addCriterion("state >=", value, "state");
			return this;
		}

		public Criteria andStateLessThan(Byte value) {
			addCriterion("state <", value, "state");
			return this;
		}

		public Criteria andStateLessThanOrEqualTo(Byte value) {
			addCriterion("state <=", value, "state");
			return this;
		}

		public Criteria andStateIn(List values) {
			addCriterion("state in", values, "state");
			return this;
		}

		public Criteria andStateNotIn(List values) {
			addCriterion("state not in", values, "state");
			return this;
		}

		public Criteria andStateBetween(Byte value1, Byte value2) {
			addCriterion("state between", value1, value2, "state");
			return this;
		}

		public Criteria andStateNotBetween(Byte value1, Byte value2) {
			addCriterion("state not between", value1, value2, "state");
			return this;
		}
	}
}