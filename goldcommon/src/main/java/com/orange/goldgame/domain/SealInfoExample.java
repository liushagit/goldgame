package com.orange.goldgame.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SealInfoExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public SealInfoExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    protected SealInfoExample(SealInfoExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table seal_info
     *
     * @ibatorgenerated Wed Oct 09 09:55:32 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andPlayerIdIsNull() {
            addCriterion("player_id is null");
            return this;
        }

        public Criteria andPlayerIdIsNotNull() {
            addCriterion("player_id is not null");
            return this;
        }

        public Criteria andPlayerIdEqualTo(Integer value) {
            addCriterion("player_id =", value, "playerId");
            return this;
        }

        public Criteria andPlayerIdNotEqualTo(Integer value) {
            addCriterion("player_id <>", value, "playerId");
            return this;
        }

        public Criteria andPlayerIdGreaterThan(Integer value) {
            addCriterion("player_id >", value, "playerId");
            return this;
        }

        public Criteria andPlayerIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("player_id >=", value, "playerId");
            return this;
        }

        public Criteria andPlayerIdLessThan(Integer value) {
            addCriterion("player_id <", value, "playerId");
            return this;
        }

        public Criteria andPlayerIdLessThanOrEqualTo(Integer value) {
            addCriterion("player_id <=", value, "playerId");
            return this;
        }

        public Criteria andPlayerIdIn(List values) {
            addCriterion("player_id in", values, "playerId");
            return this;
        }

        public Criteria andPlayerIdNotIn(List values) {
            addCriterion("player_id not in", values, "playerId");
            return this;
        }

        public Criteria andPlayerIdBetween(Integer value1, Integer value2) {
            addCriterion("player_id between", value1, value2, "playerId");
            return this;
        }

        public Criteria andPlayerIdNotBetween(Integer value1, Integer value2) {
            addCriterion("player_id not between", value1, value2, "playerId");
            return this;
        }

        public Criteria andSealReasonIsNull() {
            addCriterion("seal_reason is null");
            return this;
        }

        public Criteria andSealReasonIsNotNull() {
            addCriterion("seal_reason is not null");
            return this;
        }

        public Criteria andSealReasonEqualTo(String value) {
            addCriterion("seal_reason =", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonNotEqualTo(String value) {
            addCriterion("seal_reason <>", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonGreaterThan(String value) {
            addCriterion("seal_reason >", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonGreaterThanOrEqualTo(String value) {
            addCriterion("seal_reason >=", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonLessThan(String value) {
            addCriterion("seal_reason <", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonLessThanOrEqualTo(String value) {
            addCriterion("seal_reason <=", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonLike(String value) {
            addCriterion("seal_reason like", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonNotLike(String value) {
            addCriterion("seal_reason not like", value, "sealReason");
            return this;
        }

        public Criteria andSealReasonIn(List values) {
            addCriterion("seal_reason in", values, "sealReason");
            return this;
        }

        public Criteria andSealReasonNotIn(List values) {
            addCriterion("seal_reason not in", values, "sealReason");
            return this;
        }

        public Criteria andSealReasonBetween(String value1, String value2) {
            addCriterion("seal_reason between", value1, value2, "sealReason");
            return this;
        }

        public Criteria andSealReasonNotBetween(String value1, String value2) {
            addCriterion("seal_reason not between", value1, value2, "sealReason");
            return this;
        }

        public Criteria andSealTimeIsNull() {
            addCriterion("seal_time is null");
            return this;
        }

        public Criteria andSealTimeIsNotNull() {
            addCriterion("seal_time is not null");
            return this;
        }

        public Criteria andSealTimeEqualTo(Date value) {
            addCriterion("seal_time =", value, "sealTime");
            return this;
        }

        public Criteria andSealTimeNotEqualTo(Date value) {
            addCriterion("seal_time <>", value, "sealTime");
            return this;
        }

        public Criteria andSealTimeGreaterThan(Date value) {
            addCriterion("seal_time >", value, "sealTime");
            return this;
        }

        public Criteria andSealTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("seal_time >=", value, "sealTime");
            return this;
        }

        public Criteria andSealTimeLessThan(Date value) {
            addCriterion("seal_time <", value, "sealTime");
            return this;
        }

        public Criteria andSealTimeLessThanOrEqualTo(Date value) {
            addCriterion("seal_time <=", value, "sealTime");
            return this;
        }

        public Criteria andSealTimeIn(List values) {
            addCriterion("seal_time in", values, "sealTime");
            return this;
        }

        public Criteria andSealTimeNotIn(List values) {
            addCriterion("seal_time not in", values, "sealTime");
            return this;
        }

        public Criteria andSealTimeBetween(Date value1, Date value2) {
            addCriterion("seal_time between", value1, value2, "sealTime");
            return this;
        }

        public Criteria andSealTimeNotBetween(Date value1, Date value2) {
            addCriterion("seal_time not between", value1, value2, "sealTime");
            return this;
        }
    }
}