package com.orange.goldgame.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeRecordExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public ExchangeRecordExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    protected ExchangeRecordExample(ExchangeRecordExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table exchange_record
     *
     * @ibatorgenerated Fri Jul 19 17:21:54 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andRecordidIsNull() {
            addCriterion("recordId is null");
            return this;
        }

        public Criteria andRecordidIsNotNull() {
            addCriterion("recordId is not null");
            return this;
        }

        public Criteria andRecordidEqualTo(Integer value) {
            addCriterion("recordId =", value, "recordid");
            return this;
        }

        public Criteria andRecordidNotEqualTo(Integer value) {
            addCriterion("recordId <>", value, "recordid");
            return this;
        }

        public Criteria andRecordidGreaterThan(Integer value) {
            addCriterion("recordId >", value, "recordid");
            return this;
        }

        public Criteria andRecordidGreaterThanOrEqualTo(Integer value) {
            addCriterion("recordId >=", value, "recordid");
            return this;
        }

        public Criteria andRecordidLessThan(Integer value) {
            addCriterion("recordId <", value, "recordid");
            return this;
        }

        public Criteria andRecordidLessThanOrEqualTo(Integer value) {
            addCriterion("recordId <=", value, "recordid");
            return this;
        }

        public Criteria andRecordidIn(List values) {
            addCriterion("recordId in", values, "recordid");
            return this;
        }

        public Criteria andRecordidNotIn(List values) {
            addCriterion("recordId not in", values, "recordid");
            return this;
        }

        public Criteria andRecordidBetween(Integer value1, Integer value2) {
            addCriterion("recordId between", value1, value2, "recordid");
            return this;
        }

        public Criteria andRecordidNotBetween(Integer value1, Integer value2) {
            addCriterion("recordId not between", value1, value2, "recordid");
            return this;
        }

        public Criteria andPlayeridIsNull() {
            addCriterion("playerId is null");
            return this;
        }

        public Criteria andPlayeridIsNotNull() {
            addCriterion("playerId is not null");
            return this;
        }

        public Criteria andPlayeridEqualTo(Integer value) {
            addCriterion("playerId =", value, "playerid");
            return this;
        }

        public Criteria andPlayeridNotEqualTo(Integer value) {
            addCriterion("playerId <>", value, "playerid");
            return this;
        }

        public Criteria andPlayeridGreaterThan(Integer value) {
            addCriterion("playerId >", value, "playerid");
            return this;
        }

        public Criteria andPlayeridGreaterThanOrEqualTo(Integer value) {
            addCriterion("playerId >=", value, "playerid");
            return this;
        }

        public Criteria andPlayeridLessThan(Integer value) {
            addCriterion("playerId <", value, "playerid");
            return this;
        }

        public Criteria andPlayeridLessThanOrEqualTo(Integer value) {
            addCriterion("playerId <=", value, "playerid");
            return this;
        }

        public Criteria andPlayeridIn(List values) {
            addCriterion("playerId in", values, "playerid");
            return this;
        }

        public Criteria andPlayeridNotIn(List values) {
            addCriterion("playerId not in", values, "playerid");
            return this;
        }

        public Criteria andPlayeridBetween(Integer value1, Integer value2) {
            addCriterion("playerId between", value1, value2, "playerid");
            return this;
        }

        public Criteria andPlayeridNotBetween(Integer value1, Integer value2) {
            addCriterion("playerId not between", value1, value2, "playerid");
            return this;
        }

        public Criteria andGoodsidIsNull() {
            addCriterion("goodsId is null");
            return this;
        }

        public Criteria andGoodsidIsNotNull() {
            addCriterion("goodsId is not null");
            return this;
        }

        public Criteria andGoodsidEqualTo(Integer value) {
            addCriterion("goodsId =", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidNotEqualTo(Integer value) {
            addCriterion("goodsId <>", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidGreaterThan(Integer value) {
            addCriterion("goodsId >", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidGreaterThanOrEqualTo(Integer value) {
            addCriterion("goodsId >=", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidLessThan(Integer value) {
            addCriterion("goodsId <", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidLessThanOrEqualTo(Integer value) {
            addCriterion("goodsId <=", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidIn(List values) {
            addCriterion("goodsId in", values, "goodsid");
            return this;
        }

        public Criteria andGoodsidNotIn(List values) {
            addCriterion("goodsId not in", values, "goodsid");
            return this;
        }

        public Criteria andGoodsidBetween(Integer value1, Integer value2) {
            addCriterion("goodsId between", value1, value2, "goodsid");
            return this;
        }

        public Criteria andGoodsidNotBetween(Integer value1, Integer value2) {
            addCriterion("goodsId not between", value1, value2, "goodsid");
            return this;
        }

        public Criteria andCellphoneIsNull() {
            addCriterion("cellphone is null");
            return this;
        }

        public Criteria andCellphoneIsNotNull() {
            addCriterion("cellphone is not null");
            return this;
        }

        public Criteria andCellphoneEqualTo(String value) {
            addCriterion("cellphone =", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneNotEqualTo(String value) {
            addCriterion("cellphone <>", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneGreaterThan(String value) {
            addCriterion("cellphone >", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneGreaterThanOrEqualTo(String value) {
            addCriterion("cellphone >=", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneLessThan(String value) {
            addCriterion("cellphone <", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneLessThanOrEqualTo(String value) {
            addCriterion("cellphone <=", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneLike(String value) {
            addCriterion("cellphone like", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneNotLike(String value) {
            addCriterion("cellphone not like", value, "cellphone");
            return this;
        }

        public Criteria andCellphoneIn(List values) {
            addCriterion("cellphone in", values, "cellphone");
            return this;
        }

        public Criteria andCellphoneNotIn(List values) {
            addCriterion("cellphone not in", values, "cellphone");
            return this;
        }

        public Criteria andCellphoneBetween(String value1, String value2) {
            addCriterion("cellphone between", value1, value2, "cellphone");
            return this;
        }

        public Criteria andCellphoneNotBetween(String value1, String value2) {
            addCriterion("cellphone not between", value1, value2, "cellphone");
            return this;
        }

        public Criteria andExchangetimeIsNull() {
            addCriterion("exchangeTime is null");
            return this;
        }

        public Criteria andExchangetimeIsNotNull() {
            addCriterion("exchangeTime is not null");
            return this;
        }

        public Criteria andExchangetimeEqualTo(Date value) {
            addCriterion("exchangeTime =", value, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeNotEqualTo(Date value) {
            addCriterion("exchangeTime <>", value, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeGreaterThan(Date value) {
            addCriterion("exchangeTime >", value, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeGreaterThanOrEqualTo(Date value) {
            addCriterion("exchangeTime >=", value, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeLessThan(Date value) {
            addCriterion("exchangeTime <", value, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeLessThanOrEqualTo(Date value) {
            addCriterion("exchangeTime <=", value, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeIn(List values) {
            addCriterion("exchangeTime in", values, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeNotIn(List values) {
            addCriterion("exchangeTime not in", values, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeBetween(Date value1, Date value2) {
            addCriterion("exchangeTime between", value1, value2, "exchangetime");
            return this;
        }

        public Criteria andExchangetimeNotBetween(Date value1, Date value2) {
            addCriterion("exchangeTime not between", value1, value2, "exchangetime");
            return this;
        }

        public Criteria andIsexchangeIsNull() {
            addCriterion("isExchange is null");
            return this;
        }

        public Criteria andIsexchangeIsNotNull() {
            addCriterion("isExchange is not null");
            return this;
        }

        public Criteria andIsexchangeEqualTo(Integer value) {
            addCriterion("isExchange =", value, "isexchange");
            return this;
        }

        public Criteria andIsexchangeNotEqualTo(Integer value) {
            addCriterion("isExchange <>", value, "isexchange");
            return this;
        }

        public Criteria andIsexchangeGreaterThan(Integer value) {
            addCriterion("isExchange >", value, "isexchange");
            return this;
        }

        public Criteria andIsexchangeGreaterThanOrEqualTo(Integer value) {
            addCriterion("isExchange >=", value, "isexchange");
            return this;
        }

        public Criteria andIsexchangeLessThan(Integer value) {
            addCriterion("isExchange <", value, "isexchange");
            return this;
        }

        public Criteria andIsexchangeLessThanOrEqualTo(Integer value) {
            addCriterion("isExchange <=", value, "isexchange");
            return this;
        }

        public Criteria andIsexchangeIn(List values) {
            addCriterion("isExchange in", values, "isexchange");
            return this;
        }

        public Criteria andIsexchangeNotIn(List values) {
            addCriterion("isExchange not in", values, "isexchange");
            return this;
        }

        public Criteria andIsexchangeBetween(Integer value1, Integer value2) {
            addCriterion("isExchange between", value1, value2, "isexchange");
            return this;
        }

        public Criteria andIsexchangeNotBetween(Integer value1, Integer value2) {
            addCriterion("isExchange not between", value1, value2, "isexchange");
            return this;
        }
    }
}